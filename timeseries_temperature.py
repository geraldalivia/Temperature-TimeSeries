# -*- coding: utf-8 -*-
"""TimeSeries - Temperature.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Muzk9qoHfboE-5WCKl2Uv-SyYPvxu2Lf

## Library and Depedencie Needs
"""

# Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Data Load
from google.colab import drive

# Data Preparation
from tensorflow.keras.models import Sequential
from sklearn.preprocessing import MinMaxScaler

# Data Split
from sklearn.model_selection import train_test_split

# Build Model
from tensorflow.keras.layers import LSTM, Dense
from xgboost import XGBRegressor

# Evaluation
from sklearn.metrics import mean_absolute_error, mean_squared_error

"""Cell code di atas menampilkan library yang diperlukan dalam pengerjaan proyek ini. Beberapa library utama yang digunakan meliputi pandas, numpy, matplotlib, dan seaborn. Library pandas dan numpy berguna untuk manipulasi, analisis, dan komputasi data. Sementara matplotlib dan seaborn digunakan untuk plotting dan visualisasi data.

Proyek ini juga menggunakan akses Google Drive melalui Colab untuk memuat dataset. Selain itu, terdapat beberapa fungsi preprocessing dan modeling seperti MinMaxScaler dan Sequential untuk preprocessing data, train_test_split untuk membagi data menjadi set training dan testing, LSTM, Dense dan XGBRegressor untuk pemodelan machine learning, serta MAE, dan MSE untuk evaluasi model.

## Data Loading
"""

# Load dataset from drive
drive.mount('/content/drive')

raw_data = pd.read_csv('/content/drive/MyDrive/Submission/Applied Machine Learning/Project 1/Dataset/MLTempDataset1.csv')
raw_data.head()

"""Cell code di atas untuk menghubungkan drive melalui colab yang berguna untuk melakukan load dataset yang diambil dari file 'MLTempDataset1.csv', yang kemudian menampilkan 5 baris awal dalam dataframe

## Data Understanding
"""

# Melihat komposisi dataset
row = raw_data.shape[0]
column = raw_data.shape[1]

print("Dataset ini memiliki", row, "baris dan", column, "kolom")

"""Code cell di atas berguna untuk memahami struktur dataset dari raw_data yang digunakan. Pada dataset tersebut teridiri atas 7056 baris dan 3 kolom."""

# Mengetahui tipe data masing-masing kolom
raw_data.info()

"""Cell code di atas untuk mengetahui tipe data setiap kolom yang ada pada dataset raw_data. Selain itu, kita dapat melihat bahwa tidak ada kolom dengan nilai yang hilang (tidak ada missing value)."""

# Mengetahui statistik pada dataset
raw_data.describe()

"""Cell code di atas untuk menampilkan perhitungan statistik tiap kolom, terutama kolom bertipe data numerik. Dapat dilihat bahwa perhitungan statistik yang ditampilkan diantaranya adalah jumlah, mean, nilai minimum, nilai maksimum, hingga standar deviasi.

## Exploratory Data Analysis
"""

# Mengecek data dengan missing value
missing1 = raw_data.isnull().sum()
print("Missing values:\n", missing1)

"""Code Cell di atas untuk melakukan pengecekan missing value atas nilai yang hilang pada dataset raw_data"""

# Mengecek adanya data duplikat
duplicated1 = raw_data.duplicated().sum()
print("Duplicated data:", duplicated1)

"""Code Cell di atas untuk melakukan pengecekan data yang yang terdapat duplikat pada dataset raw_data"""

# Mengetahui distribusi temperature
plt.figure(figsize=(10, 5))
sns.histplot(raw_data['Hourly_Temp'], bins=30, kde=True, color='deeppink')
plt.title('Distribusi Suhu')
plt.xlabel('Suhu (°C)')
plt.ylabel('Frekuensi')
plt.show()

"""Cell code tersebut untuk menunjukkan distribusi data dalam bentuk plot histogram kurva dengan x adalah suhu.  <br>

**Insight:**
- Distribusi bimodal, tidak terlalu skewed yang menandakan data distribusi cukup baik
- Range nilai distribusi bagus, tidak ada outlier ekstrem
- Terdapat dua puncak atau Favorit Suhu (10°C dan 24-25°C), yang menandakan pola siang-malam yang berguna untuk model forecasting karena menunjukkan pola yang dapat diprediksi

## Data Preparation
"""

# Mengubah nama kolom
raw_data = raw_data.rename(columns={
    'Unnamed: 0': 'Number',
    'Datetime': 'Timestamp',
    'Hourly_Temp': 'Temperature'
})
raw_data.head()

"""Code cell di atas untuk mengubah nama (rename) kolom dalam dataset raw_data. Kolom awal terdiri dari Unnamed: 0, Datetime, dan Hourly_Temp. Kolom dengan nama baru terdii dari Number, Timestamp, dan Temperature."""

# Mengatur kolom Timestamp agar menjadi datetime untuk memudahkan ploting
if 'Timestamp' in raw_data.columns:
    raw_data['Timestamp'] = pd.to_datetime(raw_data['Timestamp'])

raw_data.info()

"""Code cell diatas untuk mengubah tipe data pada kolom Timestamp yang awalnya object menjadi datetime."""

# Plot deret waktu suhu per jam
plt.figure(figsize=(15, 6))
sns.lineplot(x='Timestamp', y='Temperature', data=raw_data, color='deeppink')
plt.title('Grafik Suhu Per Jam Seiring Waktu')
plt.xlabel('Waktu')
plt.ylabel('Suhu Per Jam (°C)')
plt.grid(True)
plt.show()

"""Cell code diatas untuk menampilkan visualisasi Time Series suhu harian <br>

**Insight:**
- Terdapat pola musiman, diantaranya:
  - Musim Dingin (Jan-Feb): suhu lebih rendah berkisar ~8-27°C
  - Musim Semi/Panas (Mar-Jun): Suhu meningkat ~15-35°C dengan puncak terjadi di bulan April-Mei
  - Musim Gugur (Jul-Nov): Suhu menurun dari ~30°C ke ~25°C
- Fluktuasi data yang menandakan perbedaan waktu siang-malam
- Range suhu berkisar 5-37°C menunjukkan pola iklim dengan variasi musiman yang jelas
"""

###
## Membuat Sliding Window (Squence) dan Melakukan Normalisasi
###

# Setup Normalisasi
normalize = True
scaler = MinMaxScaler(feature_range=(-1, 1))

# Membuat fungsi Sliding Window
def sliding_windows(y_var, data, seq_length):
    # Validasi Input
    if y_var is None:
        raise ValueError("y_var belum diatu")

    # Ekstraksi dan Reshape Data
    target_ori = data[y_var].values.reshape(-1, 1)

    # Melakukan Normalisasi
    if normalize:
        # Normalisasi pada data target
        new_data = scaler.fit_transform(target_ori)
    else:
        # Jika tidak melakukan nomalisasi, kembali gunakan data asli
        new_data = target_ori

    # Inisialisasi List
    x = [] # menyimpan input
    y = [] # menyimpan target

    # Loop Sliding Window
    for i in range(len(new_data) - seq_length):
        # Ambil 'seq_length' data sebagai input (X)
        _x = new_data[i : (i + seq_length)]
        x.append(_x)

        # Ambil data berikutnya sebagai target (Y)
        _y = new_data[i + seq_length]
        y.append(_y)

    # Konversi ke NumPy Array
    return np.array(x), np.array(y)

"""Cell Code di atas berguna untuk membuat Sliding Window. Sliding Window digunakan untuk mengubah data time-series menjadi format yang sesuai untuk proses develop ML (dalam projek ini menggunakan LSTM danXGBoost ). Dengan teknik sliding window, kita menggunakan N data point sebelumnya untuk memprediksi data point berikutnya.

"""

###
## Verifikasi Sequence
###

# Setup Parameter
seq_length = 6
x, y = sliding_windows("Temperature", raw_data, seq_length)

print(f"\n Bentuk Sequence yang Dibuat (seq_length = {seq_length})")
print("X (sequence input):", x.shape)
print("Y (nilai target):", y.shape)

# Menampilkan beberapa sampel dar X dan Y untuk verifikasi
print("\n Menampilan X (Sequence Input dari Sliding Windows)")
print(x[:3])
print("\n Menampilkan Y (Nilai Target dari Sliding Windows)")
print(y[:3])

"""Cell code di atas menampilkan implementasikan dan memverifikasi hasil dari fungsi sliding_windows yang sudah didefinisikan sebelumnya."""

# Membagi data train dan test untuk LSTM
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)

print("Bentuk X_train:", X_train.shape)
print("Bentuk y_train:", y_train.shape)
print("Bentuk X_test:", X_test.shape)
print("Bentuk y_test:", y_test.shape)

"""Cell code tersebut untuk melakukan data splitting pada dataset dengan proporsi 80:20, 80% untuk pelatihan (training) dan 20% untuk pengujian (testing)."""

# Membagi data train dan test untuk XGBBoost
X_train_xgb = X_train.reshape(X_train.shape[0], X_train.shape[1])
X_test_xgb = X_test.reshape(X_test.shape[0], X_test.shape[1])
y_train_xgb = y_train.flatten() # Mengubah y_train dari (num_samples, 1) menjadi (num_samples,)
y_test_xgb = y_test.flatten()   # Mengubah y_test dari (num_samples, 1) menjadi (num_samples,)

print("Bentuk X_train_xgb:", X_train_xgb.shape)
print("Bentuk y_train_xgb:", y_train_xgb.shape)
print("Bentuk X_test_xgb:", X_test_xgb.shape)
print("Bentuk y_test_xgb:", y_test_xgb.shape)

"""Cell code tersebut berfungsi untuk menyesuaikan bentuk (shape) dari data pelatihan dan pengujian (X_train, X_test, y_train, y_test) agar sesuai dengan format input yang diharapkan oleh model XGBoost Regressor.

## Modelling
"""

###
## Model LSTM
###

model = Sequential()
model.add(LSTM(units=50, activation='relu', input_shape=(seq_length, 1)))
model.add(Dense(units=1)) # units = 1 karena memprediksi satu nilai suhu berikutnya

"""Code Cell tersebut bertujuan untuk membangun model LSTM (Long Short-Term Memory) untuk prediksi deret waktu, dalam hal ini prediksi nilai suhu berikutnya berdasarkan data sebelumnya. <br>

**Notes:**
- Sequential() : Membuat model sekuensial yang lapisannya ditambahkan satu per satu secara berurutan.
- model.add(LSTM(...)) : Menambahkan lapisan LSTM (Long Short-Term Memory) ke model.
- units=50 : Jumlah neuron/unit di LSTM layer adalah 50.
- activation='relu' : Menggunakan fungsi aktivasi ReLU
- seq_length : Jumlah langkah waktu (timesteps) yang digunakan untuk memprediksi nilai selanjutnya.
- 1 : Setiap timestep hanya berisi satu suhu.
- model.add(Dense(...)) : Menambahkan lapisan Dense (fully connected) sebagai output layer.
- units=1 : Model hanya akan memprediksi satu nilai suhu pada timestamp berikutnya.
"""

# Mengkompilasi Model LSTM
model.compile(optimizer='adam', loss='mse')
model.summary()

"""Cell code tersebut berguna untuk mengkompilasi dan menampilkan ringkasan model LSTM yang dibuat.

**Notes:**
- compile() : langkah sebelum melatih model.
- optimizer='adam': Adam (Adaptive Moment Estimation) adalah algoritma optimasi.
- loss='mse': MSE (Mean Squared Error) digunakan untuk mengukur selisih antara nilai sebenarnya dan prediksi.
"""

# Melatih Model LSTM
history = model.fit(X_train, y_train, epochs=100, batch_size=1, verbose=1)

"""Code Cell tersebut untuk melatih model LSTM. <br>
**Notes:**
- X_train: Data input suhu untuk pelatihan.
- y_train: Output suhu selanjutnya yang ingin diprediksi.
- epochs=100: Model akan melihat seluruh dataset sebanyak 100 kali.
- batch_size=1: Model akan memperbarui bobotnya setelah setiap 1 sampel.
- verbose=1: Menampilkan progress pelatihan baris per epoch

"""

###
## Model XGBoostRegressor
###

xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42, n_jobs=-1)
xgb_model.fit(X_train_xgb, y_train_xgb)

"""Cell code tersebut untuk menginisialisasi atau membuat model XGBoost Regressor. <br>

**Notes:**
- XGBRegressor(): library xgboost.
- n_estimators=100: hyperparameter yang menentukan jumlah pohon keputusan (decision trees) yang akan dibangun oleh algoritma boosting.
- learning_rate=0.1: hyperparameter yang mengontrol ukuran langkah saat mengoptimalkan model.
- random_state=42: generator angka acak.
- n_jobs=-1: hyperparameter yang mengatur jumlah thread CPU yang akan digunakan untuk pelatihan.
"""

# Melakukan prediksi pada data testing
xgb_pred_scaled = xgb_model.predict(X_test_xgb)

"""Code cell ini berfungsi untuk membuat prediksi menggunakan model XGBoost yang telah dilatih (xgb_model) pada data pengujian. <br>

**Notes:**
- X_test_xgb: data input pengujian yang telah disesuaikan bentuknya, yang belum pernah dilihat oleh model selama pelatihan.
- xgb_model.predict(): untuk menghasilkan serangkaian nilai prediksi berdasarkan input X_test_xgb.
- xgb_pred_scaled: menyimpan hasil prediksi, yang masih dalam skala normalisasi (karena data input ke model juga dinormalisasi).

## Evaluation
"""

##
# LSTM
##

# Melakukan prediksi pada data testing
y_pred_scaled_lstm = model.predict(X_test)

# Mengukur kinerja model (skala normalisasi)
mse_lstm = mean_squared_error(y_test, y_pred_scaled_lstm)
rmse_lstm = np.sqrt(mse_lstm)
mae_lstm = mean_absolute_error(y_test, y_pred_scaled_lstm)

# Inverse transform untuk mendapatkan nilai pada skala asli
y_test_original = scaler.inverse_transform(y_test)
y_pred_original_lstm = scaler.inverse_transform(y_pred_scaled_lstm)

# Mengukur kinerja model (skala asli)
mse_original_lstm = mean_squared_error(y_test_original, y_pred_original_lstm)
rmse_original_lstm = np.sqrt(mse_original_lstm)
mae_original_lstm = mean_absolute_error(y_test_original, y_pred_original_lstm)


##
# XGBoost
##

# Melakukan prediksi pada data testing
xgb_pred_scaled = xgb_model.predict(X_test_xgb)

# Mengukur kinerja model (skala normalisasi)
mse_xgb = mean_squared_error(y_test_xgb, xgb_pred_scaled)
rmse_xgb = np.sqrt(mse_xgb)
mae_xgb = mean_absolute_error(y_test_xgb, xgb_pred_scaled)

# Inverse transform untuk mendapatkan nilai pada skala asli
y_pred_original_xgb = scaler.inverse_transform(xgb_pred_scaled.reshape(-1, 1))

# Mengukur kinerja model (skala asli)
mse_original_xgb = mean_squared_error(y_test_original, y_pred_original_xgb)
rmse_original_xgb = np.sqrt(mse_original_xgb)
mae_original_xgb = mean_absolute_error(y_test_original, y_pred_original_xgb)


### Melihat komparasi kedua model melalui evaluasi
# Kumpulkan metrik evaluasi untuk kedua model
metrics_df = pd.DataFrame({
    'Metrik': ['MSE (Normalized)', 'RMSE (Normalized)', 'MAE (Normalized)',
               'MSE (Original Scale)', 'RMSE (Original Scale)', 'MAE (Original Scale)'],
    'LSTM': [mse_lstm, rmse_lstm, mae_lstm,
             mse_original_lstm, rmse_original_lstm, mae_original_lstm],
    'XGBoost': [mse_xgb, rmse_xgb, mae_xgb,
                mse_original_xgb, rmse_original_xgb, mae_original_xgb]
})

print("\n~~~~Tabel Komparasi Metrik Evaluasi~~~~~")
print(metrics_df.round(4).to_string(index=False))

"""Cell code tersebut bertujuan untuk melakukan proses evaluasi dari model yang telah dilatih. Model yang sebelumnya dibuat yaitu LSTM dan XGBosst dilihat evaluasinya baik dari skala normal (normalized) dan data asli (original scale) berdasarkan 3 metrik evaluasi yang digunakan, yaitu Mean Absolute Error (MAE), Mean Squared Error (MSE), dan Root Mean Squared Error.

**Notes:**
- MAE (Mean Absolute Error): rata-rata kesalahan absolut prediksi terhadap nilai sebenarnya.
- MSE (Mean Squared Error): rata-rata kuadrat kesalahan.
RMSE (Root Mean Squared Error): akar dari MSE.
- R² (R-squared): proporsi variansi target yang dapat dijelaskan oleh fitur.

## Visualisasi
"""

# Komparasi Kdeua Model antara LSTM dan XGBoost
plt.figure(figsize=(18, 9))
plt.plot(y_test_original, label='Nilai Aktual (Test)', color='lightblue', linewidth=2)
plt.plot(y_pred_original_lstm, label='Nilai Prediksi LSTM', color='purple', linestyle='--', alpha=0.7)
plt.plot(y_pred_original_xgb, label='Nilai Prediksi XGBoost', color='deeppink', linestyle=':', alpha=0.7)
plt.title('Komparasi Nilai Aktual vs. Prediksi Suhu (Skala Asli) - LSTM vs. XGBoost')
plt.xlabel('Indeks Waktu (pada data testing)')
plt.ylabel('Suhu (°C)')
plt.legend()
plt.grid(True)
plt.show()

"""Cell Code tersebut berguna untuk manmpilkan grafik visualisasi dari kedua model berdasarkan 3 metrik, yaitu nilai prediksi untuk LSTM, nilai prediksi untuk XGBoost, dan nilai prediksi aktual.

**Insight:**
Kedua model mengikuti pola Tren umum, yang menandakan kedua model berhasil menangkap pola dasar deret waktu suhu.

## Inference
"""

###
## LSTM
###

new_data_full = scaler.fit_transform(target_original_full)
last_sequence = new_data_full[-seq_length:]
last_sequence = last_sequence.reshape(1, seq_length, 1)

# Lakukan prediksi
next_temp_scaled_lstm = model.predict(last_sequence)

# Inverse transform untuk mendapatkan nilai pada skala asli
next_temp_original_lstm = scaler.inverse_transform(next_temp_scaled_lstm)

print(f"\nPrediksi Suhu Berikutnya (LSTM)")
print(f"Prediksi suhu berikutnya (skala asli): {next_temp_original_lstm[0][0]:.2f} °C")

"""Cell Code tersebut merupakan salah satu inferensi prediksi temperature. Data yang diprediksi olehh model LSTM menunjukkan 22.83°C. Data ini berasal dari data terakhir last_sequence, yaitu seq_length (6) 6 data suhu terakhir (yang telah dinormalisasi) untuk memprediksi nilai berikutnya berdasarkan pola yang telah dipelajari. Hasilnya lalu dikembalikan ke satuan asli (°C) dengan inverse_transform(), dan nilainya bergantung pada data terakhir yang digunakan saat inferensi."""

###
## XGBoost
###

target_original_full = raw_data['Temperature'].values.reshape(-1, 1)
data_to_use_full = scaler.fit_transform(target_original_full)

last_sequence_xgb = data_to_use_full[-seq_length:]
last_sequence_xgb = last_sequence_xgb.reshape(1, seq_length)

# Lakukan prediksi
next_temp_scaled_xgb = xgb_model.predict(last_sequence_xgb)

# Inverse transform untuk mendapatkan nilai pada skala asli
next_temp_original_xgb = scaler.inverse_transform(next_temp_scaled_xgb.reshape(-1, 1))

print(f"\nPrediksi Suhu Berikutnya (XGBoost)")
print(f"Prediksi suhu berikutnya (skala asli): {next_temp_original_xgb[0][0]:.2f} °C")

"""Cell Code tersebut merupakan salah satu inferensi prediksi temperature. Data yang diprediksi olehh model XGBoost menunjukkan 23.12°C. Data ini berasal dari data terakhir last_sequence, yaitu seq_length (6) 6 data suhu terakhir (yang telah dinormalisasi) untuk memprediksi nilai berikutnya berdasarkan pola yang telah dipelajari. Hasilnya lalu dikembalikan ke satuan asli (°C) dengan inverse_transform(), dan nilainya bergantung pada data terakhir yang digunakan saat inferensi."""

### Contoh input manual menggunakan model LSTM

manual_input = np.array([25.0, 24.5, 24.0, 23.5, 23.0, 22.5]).reshape(-1, 1)

# Normalisasi input manual
# Gunakan scaler yang sudah di-fit pada data pelatihan
manual_input_scaled = scaler.transform(manual_input)

# Ubah bentuk untuk input model LSTM
# (1, seq_length, 1) -> 1 sampel, seq_length timesteps, 1 fitur
manual_input_reshaped = manual_input_scaled.reshape(1, seq_length, 1)

# Lakukan prediksi
manual_pred_scaled_lstm = model.predict(manual_input_reshaped)

# Inverse transform untuk mendapatkan nilai pada skala asli
manual_pred_original_lstm = scaler.inverse_transform(manual_pred_scaled_lstm)

print(f"Input manual: {manual_input.flatten()} °C")
print(f"Prediksi suhu berikutnya (LSTM) dari input manual: {manual_pred_original_lstm[0][0]:.2f} °C")

"""Cell Code tersebut merupakan salah satu implementasi jika melakukan manual input untuk memprediksi temperature/suhu.

**Hasil prediksi suhunya adalah 21.94°C**. Didapatkan dari data imput manual [25.0, 24.5, 24.0, 23.5, 23.0, 22.5]. Pada data ini, terjadi tren penurunansuhu, model LSTM yang telah dilatih pada pola serupa memprediksi kelanjutan tren tersebut. Nilai 21.94°C adalah hasil komputasi setelah input dinormalisasi dan diubah kembali ke skala suhu asli.
"""